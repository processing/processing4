package processing.vulkan;

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.PathIterator;
import java.io.IOException;
import java.net.URL;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.HashMap;
import java.util.Map;

import com.jogamp.common.util.VersionNumber;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GL2ES2;
import com.jogamp.opengl.GL2ES3;
import com.jogamp.opengl.GL2GL3;
import com.jogamp.opengl.GL3ES3;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLCapabilitiesImmutable;
import com.jogamp.opengl.GLContext;
import com.jogamp.opengl.GLDrawable;
import com.jogamp.opengl.fixedfunc.GLMatrixFunc;
import com.jogamp.opengl.GLRendererQuirks;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.glu.GLUtessellator;
import com.jogamp.opengl.glu.GLUtessellatorCallbackAdapter;


public interface PJOGLInterface {
public Object getNative();
public void setCaps(GLCapabilities caps);
public GLCapabilitiesImmutable getCaps();
public boolean needSharedObjectSync();
public void setFps(float fps);
public void getGL(GLAutoDrawable glDrawable);
public void init(GLAutoDrawable glDrawable);
public void showme(String method, int value);
public void flush();
public void finish();
public void hint(int target, int hint);
public void enable(int value);
public void disable(int value);
public void getBooleanv(int value, IntBuffer data);
public void getIntegerv(int value, IntBuffer data);
public void getFloatv(int value, FloatBuffer data);
public boolean isEnabled(int value);
public String getString(int name);
public int getError();
public String errorString(int err);
public void genBuffers(int n, IntBuffer buffers);
public void deleteBuffers(int n, IntBuffer buffers);
public void bindBuffer(int target, int buffer);
public void bufferData(int target, int size, Buffer data, int usage);
public void bufferSubData(int target, int offset, int size, Buffer data);
public void isBuffer(int buffer);
public void getBufferParameteriv(int target, int value, IntBuffer data);
public ByteBuffer mapBuffer(int target, int access);
public ByteBuffer mapBufferRange(int target, int offset, int length, int access);
public void unmapBuffer(int target);
public long fenceSync(int condition, int flags);
public void deleteSync(long sync);
public int clientWaitSync(long sync, int flags, long timeout);
public void depthRangef(float n, float f);
public void viewport(int x, int y, int w, int h);
public void vertexAttrib1f(int index, float value);
public void vertexAttrib2f(int index, float value0, float value1);
public void vertexAttrib3f(int index, float value0, float value1, float value2);
public void vertexAttrib4f(int index, float value0, float value1, float value2, float value3);
public void vertexAttrib1fv(int index, FloatBuffer values);
public void vertexAttrib2fv(int index, FloatBuffer values);
public void vertexAttrib3fv(int index, FloatBuffer values);
public void vertexAttrib4fv(int index, FloatBuffer values);
public void vertexAttribPointer(int index, int size, int type, boolean normalized, int stride, int offset);
public void enableVertexAttribArray(int index);
public void disableVertexAttribArray(int index);
public void drawArraysImpl(int mode, int first, int count);
public void drawElementsImpl(int mode, int count, int type, int offset);
public void lineWidth(float width);
public void frontFace(int dir);
public void cullFace(int mode);
public void polygonOffset(float factor, float units);
public void pixelStorei(int pname, int param);
public void texImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, Buffer data);
public void copyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border);
public void texSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, Buffer data);
public void copyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height);
public void compressedTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int imageSize, Buffer data);
public void compressedTexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int imageSize, Buffer data);
public void texParameteri(int target, int pname, int param);
public void texParameterf(int target, int pname, float param);
public void texParameteriv(int target, int pname, IntBuffer params);
public void texParameterfv(int target, int pname, FloatBuffer params);
public void generateMipmap(int target);
public void genTextures(int n, IntBuffer textures);
public void deleteTextures(int n, IntBuffer textures);
public void getTexParameteriv(int target, int pname, IntBuffer params);
public void getTexParameterfv(int target, int pname, FloatBuffer params);
public boolean isTexture(int texture);
public int createShader(int type);
public void shaderSource(int shader, String source);
public void compileShader(int shader);
public void releaseShaderCompiler();
public void deleteShader(int shader);
public void shaderBinary(int count, IntBuffer shaders, int binaryFormat, Buffer binary, int length);
public int createProgram();
public void attachShader(int program, int shader);
public void detachShader(int program, int shader);
public void linkProgram(int program);
public void useProgram(int program);
public void deleteProgram(int program);
public String getActiveAttrib(int program, int index, IntBuffer size, IntBuffer type);
public int getAttribLocation(int program, String name);
public void bindAttribLocation(int program, int index, String name);
public int getUniformLocation(int program, String name);
public String getActiveUniform(int program, int index, IntBuffer size, IntBuffer type);
public void uniform1i(int location, int value);
public void uniform2i(int location, int value0, int value1);
public void uniform3i(int location, int value0, int value1, int value2);
public void uniform4i(int location, int value0, int value1, int value2, int value3);
public void uniform1f(int location, float value);
public void uniform2f(int location, float value0, float value1);
public void uniform3f(int location, float value0, float value1, float value2);
public void uniform4f(int location, float value0, float value1, float value2, float value3);
public void uniform1iv(int location, int count, IntBuffer v);
public void uniform2iv(int location, int count, IntBuffer v);
public void uniform3iv(int location, int count, IntBuffer v);
public void uniform4iv(int location, int count, IntBuffer v);
public void uniform1fv(int location, int count, FloatBuffer v);
public void uniform2fv(int location, int count, FloatBuffer v);
public void uniform3fv(int location, int count, FloatBuffer v);
public void uniform4fv(int location, int count, FloatBuffer v);
public void uniformMatrix2fv(int location, int count, boolean transpose, FloatBuffer mat);
public void uniformMatrix3fv(int location, int count, boolean transpose, FloatBuffer mat);
public void uniformMatrix4fv(int location, int count, boolean transpose, FloatBuffer mat);
public void validateProgram(int program);
public boolean isShader(int shader);
public void getShaderiv(int shader, int pname, IntBuffer params);
public void getAttachedShaders(int program, int maxCount, IntBuffer count, IntBuffer shaders);
public String getShaderInfoLog(int shader);
public String getShaderSource(int shader);
public void getShaderPrecisionFormat(int shaderType, int precisionType, IntBuffer range, IntBuffer precision);
public void getVertexAttribfv(int index, int pname, FloatBuffer params);
public void getVertexAttribiv(int index, int pname, IntBuffer params);
public void getVertexAttribPointerv(int index, int pname, ByteBuffer data);
public void getUniformfv(int program, int location, FloatBuffer params);
public void getUniformiv(int program, int location, IntBuffer params);
public boolean isProgram(int program);
public void getProgramiv(int program, int pname, IntBuffer params);
public String getProgramInfoLog(int program);
public void scissor(int x, int y, int w, int h);
public void sampleCoverage(float value, boolean invert);
public void stencilFunc(int func, int ref, int mask);
public void stencilFuncSeparate(int face, int func, int ref, int mask);
public void stencilOp(int sfail, int dpfail, int dppass);
public void stencilOpSeparate(int face, int sfail, int dpfail, int dppass);
public void depthFunc(int func);
public void blendEquation(int mode);
public void blendEquationSeparate(int modeRGB, int modeAlpha);
public void blendFunc(int src, int dst);
public void blendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
public void blendColor(float red, float green, float blue, float alpha);
public void colorMask(boolean r, boolean g, boolean b, boolean a);
public void depthMask(boolean mask);
public void stencilMask(int mask);
public void stencilMaskSeparate(int face, int mask);
public void clearColor(float r, float g, float b, float a);
public void clearDepth(float d);
public void clearStencil(int s);
public void clear(int buf);
public void deleteFramebuffers(int n, IntBuffer framebuffers);
public void genFramebuffers(int n, IntBuffer framebuffers);
public void bindRenderbuffer(int target, int renderbuffer);
public void deleteRenderbuffers(int n, IntBuffer renderbuffers);
public void genRenderbuffers(int n, IntBuffer renderbuffers);
public void renderbufferStorage(int target, int internalFormat, int width, int height);
public void framebufferRenderbuffer(int target, int attachment, int rbt, int renderbuffer);
public void framebufferTexture2D(int target, int attachment, int texTarget, int texture, int level);
public int checkFramebufferStatus(int target);
public boolean isFramebuffer(int framebuffer);
public void getFramebufferAttachmentParameteriv(int target, int attachment, int name, IntBuffer params);
public boolean isRenderbuffer(int renderbuffer);
public void getRenderbufferParameteriv(int target, int name, IntBuffer params);
public void blitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);
public void renderbufferStorageMultisample(int target, int samples, int format, int width, int height);
public void readBuffer(int buf);
public void drawBuffer(int buf);
}
